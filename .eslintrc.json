{
  "extends": [
    "airbnb",
    "airbnb-typescript",
    "next/core-web-vitals",
    "plugin:prettier/recommended",
    "plugin:tailwindcss/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "@typescript-eslint",
    "unused-imports",
    "simple-import-sort",
    "import"
  ],
  "parserOptions": {
    "project": [
      "./tsconfig.json"
    ]
  },
  "rules": {
    "prettier/prettier": "error",
    "no-console": "off",
    "no-underscore-dangle": "off",
    "react/function-component-definition": "off",
    "react/react-in-jsx-scope": "off",
    // Expo support this
    "react/destructuring-assignment": "off",
    // Vscode doesn't support automatically destructuring, it's a pain to plus a new variable
    "jsx-a11y/anchor-is-valid": "off",
    "no-await-in-loop": "off",
    "no-continue": "off",
    "no-plusplus": "off",
    // Next.js use his own internal link system
    "react/require-default-props": "off",
    // Disallow non-defined react props as undefined
    "react/jsx-props-no-spreading": "off",
    // _app.tsx uses spread operator and also, react-hook-form
    "react/no-unused-prop-types": "warn",
    "react-hooks/exhaustive-deps": "off",
    // Incorrectly report needed dependency with Next.js router
    "react-hooks/rules-of-hooks": "error",
    "@next/next/no-img-element": "off",
    // We currently not using next/image because it isn't supported with SSG mode
    "@typescript-eslint/comma-dangle": "off",
    // Avoid conflict rule between Eslint and Prettier
    "@typescript-eslint/consistent-type-imports": "error",
    // Ensure `import type` is used when it's necessary
    "import/prefer-default-export": "off",
    // Named export is easier to refactor automatically
    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          [
            "^\\u0000",
            "^@?\\w",
            "^[^.]",
            "^\\."
          ]
        ]
      }
    ],
    "simple-import-sort/exports": "error",
    // Export configuration for `eslint-plugin-simple-import-sort`
    "import/first": "error",
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": [
      "warn",
      // or "error"
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/explicit-function-return-type": "warn",
    "no-return-assign": "off",
    "no-param-reassign": [
      "error",
      {
        "props": true,
        "ignorePropertyModificationsFor": [
          "prev"
        ]
      }
    ],
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],
    "tailwindcss/no-custom-classname": [
      "warn",
      {
        "whitelist": [
          "text-tm-bol",
          "text-tm-md",
          "text-tm-reg",
          "text-ts-bol",
          "text-ts-md",
          "text-ts-reg",
          "text-bl-bol",
          "text-bl-md",
          "text-bl-reg",
          "text-bm-bol",
          "text-bm-md",
          "text-bm-reg",
          "text-bs-bol",
          "text-bs-md",
          "text-bs-reg",
          "text-btnL-bol",
          "text-btnL-md",
          "text-btnL-reg",
          "text-btnM-bol",
          "text-btnM-md",
          "text-btnM-reg",
          "text-cap-bol",
          "text-cap-md",
          "text-cap-reg"
        ]
      }
    ],
    "tailwindcss/enforces-negative-arbitrary-values": "off"
  },
  "overrides": [
    {
      "files": [
        "src/infrastructure/mock/**"
      ],
      "rules": {
        "import/no-extraneous-dependencies": "off"
      }
    }
  ]
}
